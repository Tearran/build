#!/bin/bash

directory="$(dirname "${BASH_SOURCE[0]}")" ;
filename="$(basename "${BASH_SOURCE[0]}")" ;
cd "${directory}"
clear

# SET RED
echo -e "\e[31m"
# ASCII Art

cat << EOF
      █ █ █ █ █ █ █ █ █ █ █
     ███████████████████████
   ▄▄██                   ██▄▄
   ▄▄██    ███████████    ██▄▄
   ▄▄██   ██         ██   ██▄▄
   ▄▄██   ██         ██   ██▄▄
   ▄▄██   ██         ██   ██▄▄
   ▄▄██   █████████████   ██▄▄
   ▄▄██   ██         ██   ██▄▄
   ▄▄██   ██         ██   ██▄▄
   ▄▄██   ██         ██   ██▄▄
   ▄▄██                   ██▄▄
     ███████████████████████
      █ █ █ █ █ █ █ █ █ █ █
 Welcome to armbian-build system
EOF
# SET Default
echo -e "\e[0m"

# This scripts help mesage
help_message(){
cat << EOF

Usage: ./armbian-build.sh [OPTIONS]

    -h --help             This is a help message for this script.
    -m --main             List of the main build options..
    -o --auto             List build automation options..
    -a --advd             List Of advanced build options ..

EOF
}

# compile.sh options classifyed main on documentation
main_message(){
cat << EOF

Usage: ./armbian-build.sh [OPTIONS]

	TODO:
    KERNEL                KERNEL
    KERNEL_CONFIGURE      KERNEL_CONFIGURE
    CLEAN_LEVEL           CLEAN_LEVEL
    REPOSITORY_INSTALL    REPOSITORY_INSTALL
    KERNEL_KEEP_CONFIG    KERNEL_KEEP_CONFIG
    BUILD_MINIMAL         BUILD_MINIMAL
    BUILD_DESKTOP         BUILD_DESKTOP
    EXTERNAL              EXTERNAL
    BSPFREEZE             BSPFREEZE What is BSP how does freeze
    INSTALL_HEADERS       INSTALL_HEADERS
    EXTERNAL_NEW          EXTERNAL_NEW
    CREATE_PATCHES        Warning: This option is deprecated and may be removed in future releases
	                       - use the new kernel-patch / uboot-patch / atf-patch CLI commands instead.
    OFFLINE_WORK          OFFLINE_WORK
    BUILD_ALL             Warning: This option is .... space...


EOF
}

# compile.sh options classifyed advanced
advd_message(){
cat << EOF

Usage: ./armbian-build.sh [OPTIONS]

	TODO:
    INSTALL_HEADERS       INSTALL_HEADERS
    EXTERNAL_NEW          EXTERNAL_NEW
    CREATE_PATCHES        Warning: This option is deprecated and may be removed in future releases
	                       - use the new kernel-patch / uboot-patch / atf-patch CLI commands instead.
    OFFLINE_WORK          OFFLINE_WORK
    BUILD_ALL             Warning: This option is .... space...

EOF
}

# compile.sh options classifyed automation
auto_message(){
cat << EOF

Usage: ./armbian-build.sh [OPTIONS]

    TODO:
    EXPERT               ( yes | no ): Show development features and boards regardless of its status in interactive mode
    USERPATCHES_PATH     ( userpatches/ ): set alternate path for location of userpatches folder
    USE_CCACHE           ( yes | no ): use a C compiler cache to speed up the build process
    PRIVATE_CCACHE       ( yes | no ) use $DEST/ccache as ccache home directory
    SKIP_EXTERNAL_TOOLCHAINS ( yes | no ) don't download and use Linaro toolchains, by default placed in cache/toolchain
                         (and configurable with ARMBIAN_CACHE_TOOLCHAIN_PATH)
    PROGRESS_DISPLAY     ( none | plain | dialog ): Display output of verbose processes
	                      compilation, packaging, debootstrap
    PROGRESS_LOG_TO_FILE ( yes | no ): duplicate output, affected by previous option, to log files output/debug/*.log
    NO_APT_CACHER        ( yes | no ): disable usage of APT cache. Default yes in containers, but can be overridden
    DISABLE_IPV6         ( true | false ): The distant future, the year Two-Thousand.
	                     Set false to allow Aria2c to use a modern ip protocol.

EOF
}


# Check the passed arguments
if [[ "$1" == "--help"  ||  "$1" == "-h" ]]; then
    help_message ; exit 0;
elif [[ "$1" == "--main"  ||  "$1" == "-m" ]]; then
    main_message ; exit 0;
elif [[ "$1" == "--auto"  ||  "$1" == "-o" ]]; then
    auto_message ; exit 0;
elif [[ "$1" == "--advd"  ||  "$1" == "-a" ]]; then
    advd_message ; exit 0;
else
    # start_time=$(date +%s)

    bash "./compile.sh" "$@"

    # end_time=$(date +%s)
    # elapsed_time=$((end_time - start_time))
    # echo "Compilation completed in ${elapsed_time} seconds."
fi
