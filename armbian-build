#!/usr/bin/env bash
#

#set -x

# Initialise script
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
filename="$(basename "${BASH_SOURCE[0]}")"

source_data() {
	# Check if user is already in the working directory
	# load the source the data file
	if [ "$script_dir" != "$current_dir" ]; then
	    #echo -e "\nWarning: Not in working directory:\ncd $script_dir\nOK: Continuing\n\n"
	    cd "$script_dir" || exit 1
	    # shellcheck source=/dev/null
	    source ./lib/functions/cli/commands.sh
	    # Call the array from lib
	    armbian_register_commands
	elif [ "$script_dir" == "$current_dir" ]; then
	    # shellcheck source=/dev/null
	    source ./lib/functions/cli/commands.sh
	    # Call the array from lib
	    armbian_register_commands
	else
		echo "Error: Uknown "
	fi
}

# This scripts help mesage

help_message(){

cat << EOF
Help Usage: ./${filename} [ flag ] | [ OPTION=[var,var] .. ]

  -h, --help       This help message and list of Build options.

  -e, --examples   Place holder list of simple/basic Build[OPTIONS] and examples.

  -a, --advanced   Possible --flag option to list advanced Build[OPTIONS]

    , --handlers   Temp --flag to List Command Handlers Dictionary.

    , --variable   Temp --flag to List Variables Dictionary.

For more detailed options, consult the examples help message.

EOF
exit 0 ;

}

basic_message(){

    echo -e "Usage: ./${filename} [OPTIONS=[VAR,VAR] [...]]"
# TODO arrays and examples
cat << EOF

  BUILD_ONLY=["CSV"]           (u-boot, kernel, etc.).default NULL.

  CLEAN_LEVEL=["CSV"]          Specify cleaning level (make, debs, etc.).

  REPOSITORY_INSTALL=[unknown] Needed example.

  BUILD_MINIMAL=["yes"]        Build a minimal CLI image default no/NULL.

  BUILD_DESKTOP=["yes"]        Build an image with a minimal desktop, default no/NULL?.

  EXTERNAL=[unknown]           Needed example.

  BOARD=[unknown]              Needed example.

  BRANCH=[unknown]             Needed example.

  RELEASE=["CSV"]              Needed example.

For more detailed options, consult the TODO: Advanced help message.

EOF

exit 0 ;

}

# Funtion to display advance and detaile options
advanced_message(){

    echo -e "Usage: ./${filename} [OPTIONS]"
    source_data
    echo -e "\nARMBIAN_COMMANDS_TO_HANDLERS_DICT:\n"
    for key in "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}"; do
        echo -e "  $key -  ${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$key]}\n"
    done

    echo -e "\nARMBIAN_COMMANDS_TO_VARS_DICT:"
    for key in "${!ARMBIAN_COMMANDS_TO_VARS_DICT[@]}"; do
        echo -e "  $key  -  ${ARMBIAN_COMMANDS_TO_VARS_DICT[$key]}\n"
    done

	echo "For more detailed options, consult the full help message."

	exit 0 ;

}

# Display HANDLERS Dictionary
if [[ "$1" == "--handlers" ]]; then
    source_data
    echo "ARMBIAN_COMMANDS_TO_HANDLERS_DICT:"
    for key in "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}"; do
        echo "$key -> ${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$key]}"
    done
    exit 0 ;

# Display VAR Dictionary
elif [[ "$1" == "--variable" ]]; then
    source_data
    echo -e "\nARMBIAN_COMMANDS_TO_VARS_DICT:"
    for key in "${!ARMBIAN_COMMANDS_TO_VARS_DICT[@]}"; do
        echo "$key -> ${ARMBIAN_COMMANDS_TO_VARS_DICT[$key]}"
    done
	exit 0 ;

# Use for doc generation such as man pages, markup/down andor html
elif [[ "$1" == "--hidden" ]]; then
	echo -e "\nFor DOC generator\n"
	exit 0 ;

elif [[ "$1" == "--advanced" || "$1" == "-a" ]]; then
    source_data
    advanced_message
	exit 0 ;

elif [[ "$1" == "--examples" || "$1" == "-e" ]]; then
    source_data
    basic_message
	exit 0 ;

# Main Help Message
elif [[ "$1" == "-h" ||  "$1" == "--help" ]]; then
    source_data
    help_message
	exit 0 ;

# Otherwise pass options to ./compile.sh
else
    # Pass args to ./compile.sh
    cd "$script_dir"
    bash "./compile.sh" "$@"
fi
