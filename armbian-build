#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2013-2023 Tearran tearran@g...l.c.m


# Initialise script
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
filename="$(basename "${BASH_SOURCE[0]}")"

# Check if user is already in the working directory
# load the source the data file
if [ "$script_dir" != "$current_dir" ]; then
    echo "Changing to working directory: $script_dir"
    cd "$script_dir" || exit 1
    # shellcheck source=/dev/null
    source ./lib/functions/cli/commands.sh
elif [ "$script_dir" == "$current_dir" ]; then
    # shellcheck source=/dev/null
    source ./lib/functions/cli/commands.sh
else
	echo "Error: Uknown "
fi

# Call the array from lib
armbian_register_commands


# Placeholder filler for tests
filler_doc() {

    # Set Foreground RED
    clear && echo -e "\e[31m"

	# HERE DOC
    cat << EOF
          █ █ █ █ █ █ █ █ █ █ █
         ███████████████████████
       ▄▄██                   ██▄▄
       ▄▄██    ███████████    ██▄▄
       ▄▄██   ██         ██   ██▄▄
       ▄▄██   ██         ██   ██▄▄
       ▄▄██   ██         ██   ██▄▄
       ▄▄██   █████████████   ██▄▄
       ▄▄██   ██         ██   ██▄▄
       ▄▄██   ██         ██   ██▄▄
       ▄▄██   ██         ██   ██▄▄
       ▄▄██                   ██▄▄
         ███████████████████████
          █ █ █ █ █ █ █ █ █ █ █
     Welcome to armbian-build system
EOF

    # Set Foreground Default
    echo -e "\e[0m"
}

# Initialize variables to store metadata and options
#title="configng"
#title="armbian-config"
#title="./compile.sh"
title="armbian-build"
uptitle=$(echo "$title" | tr '[:lower:]' '[:upper:]')
section="1" # 1 for user doc
version="0.0.0" # Comform to your format
description="A command-line tool" # Short description
options_list=("-h" "-l" "-r") # Short options/flags

# Descriptions for Short options/flags
options_desc=("Display a help message and exit" "Expose all groups and functions" "Run the specified function within the specified group")
author_list=("Tearran tearran@*hidden*" "Someone noreply@*hidden*") # Authors
bug_report="https://github.com/Tearran/configng/issues" # Issues address
date=$(date +"%B %d, %Y") # current date
man_page="$title.$section" # file naming

doc_build_system() {


	# Function to generate documentation uses:
	# YAML-like metadata header, Man page-like layout in Markdown format

	# Markdown file name $title.1.md
	cat << EOF   #> "$man_page.md"
---
title: $uptitle
section: $section
header: User Manual
footer: $title $version
date: $date
version: $version
---

# NAME

$uptitle - $description

# DESCRIPTION

The \`$title\` command is a command-line tool for $description. It provides a range of options for configuring various aspects of the system.

# SYNOPSIS

\`$title [OPTIONS] [CATEGORY] [FUNCTION]\`

\`$title\` is the script name.

[OPTIONS] are the available options.

[CATEGORY] is the group/category.

[FUNCTION] is the function within the specified group.

# OPTIONS
  -h, --help
    Display a help message and exit.

# EXAMPLES
1. Display the help message:
   \`$title -h\`


# ENVIRONMENT

Lists any environment variables that affect the behavior of the command.

EOF
    echo -e "\nARMBIAN_COMMANDS_TO_VARS_DICT:\n"
    for key in "${!ARMBIAN_COMMANDS_TO_VARS_DICT[@]}"; do
        echo "    $key -> ${ARMBIAN_COMMANDS_TO_VARS_DICT[$key]}"
    done

	echo -e "\n---\n"

    echo -e "ARMBIAN_COMMANDS_TO_HANDLERS_DICT:\n"
    for key in "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}"; do
        echo -e "    $key -> ${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$key]}"
    done

cat << EOF


# SEE ALSO

Other relevant commands and resources.

# BUGS

Report bugs to <$bug_report>.

# AUTHORS

$(for author in "${author_list[@]}"; do echo "  $author"; done)

EOF

  echo "Documentation created: $man_page.md"
}

generate_examples() {

	if command -v pandoc &> /dev/null
	then
	    echo "pandoc is installed at: $(which pandoc)"
	    # Convert the Markdown documentation to a man page

		pandoc -s -f gfm -t man ./"$man_page.md" -o ./"$man_page"

		# Display the man page
		man ./"$man_page"

		# Generate the HTML file using Pandoc
		pandoc -s -f gfm -t html ./"$man_page.md" -o ./"$man_page.html"

		# Modify the CSS styles in the HTML file to achieve a dark mode appearance
		sed -i 's/color: #1a1a1a;/color: #eee;/; s/background-color: #fdfdfd;/background-color: #333;/' "$man_page.html"
	else
		echo
	    echo "pandoc is not installed"
		echo  "try:"
		echo "sudo apt install pandoc"
		echo ""

	fi

	}

# Display HANDLERS message
if [ "$1" == "-H" ]; then
    echo "ARMBIAN_COMMANDS_TO_HANDLERS_DICT:"
    for key in "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}"; do
        echo "$key -> ${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$key]}"
    done
    exit 0 ;

elif [[ "$1" == "--hidden" ]]; then

    doc_build_system > "$man_page.md"
	generate_examples
	exit 0 ; 

# Display VAR
elif [ "$1" == "-V" ]; then
    echo -e "\nARMBIAN_COMMANDS_TO_VARS_DICT:"
    for key in "${!ARMBIAN_COMMANDS_TO_VARS_DICT[@]}"; do
        echo "$key -> ${ARMBIAN_COMMANDS_TO_VARS_DICT[$key]}"
    done
	exit 0 ;

# Main Help Message
elif [ "$1" == "-h" ]; then

    doc_build_system
	exit 0 ;

# Otherwise pass options to ./compile.sh
else
    # Pass args to ./compile.sh
    bash "./compile.sh" "$@"
fi
